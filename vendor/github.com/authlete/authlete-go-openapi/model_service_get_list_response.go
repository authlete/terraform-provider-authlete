/*
Authlete API

Authlete API Document. 

API version: 2.2.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
)

// ServiceGetListResponse struct for ServiceGetListResponse
type ServiceGetListResponse struct {
	// Start index (inclusive) of the result set. The default value is 0. Must not be a negative number. 
	Start *int32 `json:"start,omitempty"`
	// Start index (inclusive) of the result set. The default value is 0. Must not be a negative number. 
	End *int32 `json:"end,omitempty"`
	// Total number of services owned by the service owner. This doesn't mean the number of services contained in the response. 
	TotalCount *int32 `json:"totalCount,omitempty"`
	// An array of services. 
	Services []Service `json:"services,omitempty"`
}

// NewServiceGetListResponse instantiates a new ServiceGetListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceGetListResponse() *ServiceGetListResponse {
	this := ServiceGetListResponse{}
	return &this
}

// NewServiceGetListResponseWithDefaults instantiates a new ServiceGetListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceGetListResponseWithDefaults() *ServiceGetListResponse {
	this := ServiceGetListResponse{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ServiceGetListResponse) GetStart() int32 {
	if o == nil || o.Start == nil {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceGetListResponse) GetStartOk() (*int32, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ServiceGetListResponse) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *ServiceGetListResponse) SetStart(v int32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ServiceGetListResponse) GetEnd() int32 {
	if o == nil || o.End == nil {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceGetListResponse) GetEndOk() (*int32, bool) {
	if o == nil || o.End == nil {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ServiceGetListResponse) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *ServiceGetListResponse) SetEnd(v int32) {
	o.End = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *ServiceGetListResponse) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceGetListResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ServiceGetListResponse) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *ServiceGetListResponse) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *ServiceGetListResponse) GetServices() []Service {
	if o == nil || o.Services == nil {
		var ret []Service
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceGetListResponse) GetServicesOk() ([]Service, bool) {
	if o == nil || o.Services == nil {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *ServiceGetListResponse) HasServices() bool {
	if o != nil && o.Services != nil {
		return true
	}

	return false
}

// SetServices gets a reference to the given []Service and assigns it to the Services field.
func (o *ServiceGetListResponse) SetServices(v []Service) {
	o.Services = v
}

func (o ServiceGetListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	if o.Services != nil {
		toSerialize["services"] = o.Services
	}
	return json.Marshal(toSerialize)
}

type NullableServiceGetListResponse struct {
	value *ServiceGetListResponse
	isSet bool
}

func (v NullableServiceGetListResponse) Get() *ServiceGetListResponse {
	return v.value
}

func (v *NullableServiceGetListResponse) Set(val *ServiceGetListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceGetListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceGetListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceGetListResponse(val *ServiceGetListResponse) *NullableServiceGetListResponse {
	return &NullableServiceGetListResponse{value: val, isSet: true}
}

func (v NullableServiceGetListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceGetListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


