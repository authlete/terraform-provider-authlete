/*
Authlete API

Authlete API Document. 

API version: 2.2.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// Sns the model 'Sns'
type Sns string

// List of Sns
const (
	SNS_FACEBOOK Sns = "FACEBOOK"
)

// All allowed values of Sns enum
var AllowedSnsEnumValues = []Sns{
	"FACEBOOK",
}

func (v *Sns) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Sns(value)
	for _, existing := range AllowedSnsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Sns", value)
}

// NewSnsFromValue returns a pointer to a valid Sns
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSnsFromValue(v string) (*Sns, error) {
	ev := Sns(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Sns: valid values are %v", v, AllowedSnsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Sns) IsValid() bool {
	for _, existing := range AllowedSnsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Sns value
func (v Sns) Ptr() *Sns {
	return &v
}

type NullableSns struct {
	value *Sns
	isSet bool
}

func (v NullableSns) Get() *Sns {
	return v.value
}

func (v *NullableSns) Set(val *Sns) {
	v.value = val
	v.isSet = true
}

func (v NullableSns) IsSet() bool {
	return v.isSet
}

func (v *NullableSns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSns(val *Sns) *NullableSns {
	return &NullableSns{value: val, isSet: true}
}

func (v NullableSns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

