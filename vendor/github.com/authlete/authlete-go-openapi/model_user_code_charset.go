/*
Authlete API

Authlete API Document. 

API version: 2.2.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// UserCodeCharset The character set for end-user verification codes (`user_code`) for Device Flow. 
type UserCodeCharset string

// List of user_code_charset
const (
	USERCODECHARSET_BASE20 UserCodeCharset = "BASE20"
	USERCODECHARSET_NUMERIC UserCodeCharset = "NUMERIC"
)

// All allowed values of UserCodeCharset enum
var AllowedUserCodeCharsetEnumValues = []UserCodeCharset{
	"BASE20",
	"NUMERIC",
}

func (v *UserCodeCharset) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserCodeCharset(value)
	for _, existing := range AllowedUserCodeCharsetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserCodeCharset", value)
}

// NewUserCodeCharsetFromValue returns a pointer to a valid UserCodeCharset
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserCodeCharsetFromValue(v string) (*UserCodeCharset, error) {
	ev := UserCodeCharset(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserCodeCharset: valid values are %v", v, AllowedUserCodeCharsetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserCodeCharset) IsValid() bool {
	for _, existing := range AllowedUserCodeCharsetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to user_code_charset value
func (v UserCodeCharset) Ptr() *UserCodeCharset {
	return &v
}

type NullableUserCodeCharset struct {
	value *UserCodeCharset
	isSet bool
}

func (v NullableUserCodeCharset) Get() *UserCodeCharset {
	return v.value
}

func (v *NullableUserCodeCharset) Set(val *UserCodeCharset) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCodeCharset) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCodeCharset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCodeCharset(val *UserCodeCharset) *NullableUserCodeCharset {
	return &NullableUserCodeCharset{value: val, isSet: true}
}

func (v NullableUserCodeCharset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCodeCharset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

