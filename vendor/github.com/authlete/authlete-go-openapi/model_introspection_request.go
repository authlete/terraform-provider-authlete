/*
Authlete API

Authlete API Document. 

API version: 2.2.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
)

// IntrospectionRequest struct for IntrospectionRequest
type IntrospectionRequest struct {
	// An access token to introspect.
	Token string `json:"token"`
	// A string array listing names of scopes which the caller (= a protected resource endpoint of the service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`, the format of `scopes` is a space-separated list of scope names.  If this parameter is a non-empty array and if it contains a scope which is not covered by the access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete. 
	Scopes []string `json:"scopes,omitempty"`
	// A subject (= a user account managed by the service) whom the caller (= a protected resource endpoint of the service) requires.  If this parameter is not `null` and if the value does not match the subject who is associated with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete. 
	Subject *string `json:"subject,omitempty"`
	// Client certificate in PEM format, used to validate binding against access tokens using the TLS client certificate confirmation method. 
	ClientCertificate *string `json:"clientCertificate,omitempty"`
	// `DPoP` header presented by the client during the request to the resource server.  The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details. 
	Dpop *string `json:"dpop,omitempty"`
	// HTTP method of the request from the client to the protected resource endpoint. This field is used to validate the `DPoP` header.  See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details. 
	Htm *string `json:"htm,omitempty"`
	// URL of the protected resource endpoint. This field is used to validate the `DPoP` header.  See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details. 
	Htu *string `json:"htu,omitempty"`
}

// NewIntrospectionRequest instantiates a new IntrospectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntrospectionRequest(token string) *IntrospectionRequest {
	this := IntrospectionRequest{}
	this.Token = token
	return &this
}

// NewIntrospectionRequestWithDefaults instantiates a new IntrospectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntrospectionRequestWithDefaults() *IntrospectionRequest {
	this := IntrospectionRequest{}
	return &this
}

// GetToken returns the Token field value
func (o *IntrospectionRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *IntrospectionRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *IntrospectionRequest) SetToken(v string) {
	o.Token = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *IntrospectionRequest) GetScopes() []string {
	if o == nil || o.Scopes == nil {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntrospectionRequest) GetScopesOk() ([]string, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *IntrospectionRequest) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *IntrospectionRequest) SetScopes(v []string) {
	o.Scopes = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *IntrospectionRequest) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntrospectionRequest) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *IntrospectionRequest) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *IntrospectionRequest) SetSubject(v string) {
	o.Subject = &v
}

// GetClientCertificate returns the ClientCertificate field value if set, zero value otherwise.
func (o *IntrospectionRequest) GetClientCertificate() string {
	if o == nil || o.ClientCertificate == nil {
		var ret string
		return ret
	}
	return *o.ClientCertificate
}

// GetClientCertificateOk returns a tuple with the ClientCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntrospectionRequest) GetClientCertificateOk() (*string, bool) {
	if o == nil || o.ClientCertificate == nil {
		return nil, false
	}
	return o.ClientCertificate, true
}

// HasClientCertificate returns a boolean if a field has been set.
func (o *IntrospectionRequest) HasClientCertificate() bool {
	if o != nil && o.ClientCertificate != nil {
		return true
	}

	return false
}

// SetClientCertificate gets a reference to the given string and assigns it to the ClientCertificate field.
func (o *IntrospectionRequest) SetClientCertificate(v string) {
	o.ClientCertificate = &v
}

// GetDpop returns the Dpop field value if set, zero value otherwise.
func (o *IntrospectionRequest) GetDpop() string {
	if o == nil || o.Dpop == nil {
		var ret string
		return ret
	}
	return *o.Dpop
}

// GetDpopOk returns a tuple with the Dpop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntrospectionRequest) GetDpopOk() (*string, bool) {
	if o == nil || o.Dpop == nil {
		return nil, false
	}
	return o.Dpop, true
}

// HasDpop returns a boolean if a field has been set.
func (o *IntrospectionRequest) HasDpop() bool {
	if o != nil && o.Dpop != nil {
		return true
	}

	return false
}

// SetDpop gets a reference to the given string and assigns it to the Dpop field.
func (o *IntrospectionRequest) SetDpop(v string) {
	o.Dpop = &v
}

// GetHtm returns the Htm field value if set, zero value otherwise.
func (o *IntrospectionRequest) GetHtm() string {
	if o == nil || o.Htm == nil {
		var ret string
		return ret
	}
	return *o.Htm
}

// GetHtmOk returns a tuple with the Htm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntrospectionRequest) GetHtmOk() (*string, bool) {
	if o == nil || o.Htm == nil {
		return nil, false
	}
	return o.Htm, true
}

// HasHtm returns a boolean if a field has been set.
func (o *IntrospectionRequest) HasHtm() bool {
	if o != nil && o.Htm != nil {
		return true
	}

	return false
}

// SetHtm gets a reference to the given string and assigns it to the Htm field.
func (o *IntrospectionRequest) SetHtm(v string) {
	o.Htm = &v
}

// GetHtu returns the Htu field value if set, zero value otherwise.
func (o *IntrospectionRequest) GetHtu() string {
	if o == nil || o.Htu == nil {
		var ret string
		return ret
	}
	return *o.Htu
}

// GetHtuOk returns a tuple with the Htu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntrospectionRequest) GetHtuOk() (*string, bool) {
	if o == nil || o.Htu == nil {
		return nil, false
	}
	return o.Htu, true
}

// HasHtu returns a boolean if a field has been set.
func (o *IntrospectionRequest) HasHtu() bool {
	if o != nil && o.Htu != nil {
		return true
	}

	return false
}

// SetHtu gets a reference to the given string and assigns it to the Htu field.
func (o *IntrospectionRequest) SetHtu(v string) {
	o.Htu = &v
}

func (o IntrospectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["token"] = o.Token
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.ClientCertificate != nil {
		toSerialize["clientCertificate"] = o.ClientCertificate
	}
	if o.Dpop != nil {
		toSerialize["dpop"] = o.Dpop
	}
	if o.Htm != nil {
		toSerialize["htm"] = o.Htm
	}
	if o.Htu != nil {
		toSerialize["htu"] = o.Htu
	}
	return json.Marshal(toSerialize)
}

type NullableIntrospectionRequest struct {
	value *IntrospectionRequest
	isSet bool
}

func (v NullableIntrospectionRequest) Get() *IntrospectionRequest {
	return v.value
}

func (v *NullableIntrospectionRequest) Set(val *IntrospectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIntrospectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIntrospectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntrospectionRequest(val *IntrospectionRequest) *NullableIntrospectionRequest {
	return &NullableIntrospectionRequest{value: val, isSet: true}
}

func (v NullableIntrospectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntrospectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


