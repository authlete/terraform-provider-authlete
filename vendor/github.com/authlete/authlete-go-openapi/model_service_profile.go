/*
Authlete API

Authlete API Document. 

API version: 2.2.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// ServiceProfile the model 'ServiceProfile'
type ServiceProfile string

// List of service_profile
const (
	SERVICEPROFILE_FAPI ServiceProfile = "FAPI"
	SERVICEPROFILE_OPEN_BANKING ServiceProfile = "OPEN_BANKING"
)

// All allowed values of ServiceProfile enum
var AllowedServiceProfileEnumValues = []ServiceProfile{
	"FAPI",
	"OPEN_BANKING",
}

func (v *ServiceProfile) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceProfile(value)
	for _, existing := range AllowedServiceProfileEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceProfile", value)
}

// NewServiceProfileFromValue returns a pointer to a valid ServiceProfile
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceProfileFromValue(v string) (*ServiceProfile, error) {
	ev := ServiceProfile(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceProfile: valid values are %v", v, AllowedServiceProfileEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceProfile) IsValid() bool {
	for _, existing := range AllowedServiceProfileEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to service_profile value
func (v ServiceProfile) Ptr() *ServiceProfile {
	return &v
}

type NullableServiceProfile struct {
	value *ServiceProfile
	isSet bool
}

func (v NullableServiceProfile) Get() *ServiceProfile {
	return v.value
}

func (v *NullableServiceProfile) Set(val *ServiceProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceProfile(val *ServiceProfile) *NullableServiceProfile {
	return &NullableServiceProfile{value: val, isSet: true}
}

func (v NullableServiceProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

