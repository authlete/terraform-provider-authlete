/*
Authlete API

Authlete API Document. 

API version: 2.2.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
)

// AuthorizationIssueRequest struct for AuthorizationIssueRequest
type AuthorizationIssueRequest struct {
	// The ticket issued from Authlete `/auth/authorization` API. 
	Ticket string `json:"ticket"`
	// The subject (= a user account managed by the service) who has granted authorization to the client application. 
	Subject string `json:"subject"`
	// The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`. 
	AuthTime *string `json:"authTime,omitempty"`
	// The Authentication Context Class Reference performed for the end-user authentication.
	Acr *string `json:"acr,omitempty"`
	// The claims of the end-user (= pieces of information about the end-user) in JSON format. See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format. 
	Claims *string `json:"claims,omitempty"`
	// Extra properties to associate with an access token and/or an authorization code.
	Properties []Property `json:"properties,omitempty"`
	// Scopes to associate with an access token and/or an authorization code. If a non-empty string array is given, it replaces the scopes specified by the original authorization request. 
	Scopes []string `json:"scopes,omitempty"`
	// The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty, the value of the `subject` request parameter is used as the value of the `sub` claim. 
	Sub *string `json:"sub,omitempty"`
	// JSON that represents additional JWS header parameters for ID tokens that may be issued based on the authorization request.
	IdHeaderParams *string `json:"idHeaderParams,omitempty"`
}

// NewAuthorizationIssueRequest instantiates a new AuthorizationIssueRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationIssueRequest(ticket string, subject string) *AuthorizationIssueRequest {
	this := AuthorizationIssueRequest{}
	this.Ticket = ticket
	this.Subject = subject
	return &this
}

// NewAuthorizationIssueRequestWithDefaults instantiates a new AuthorizationIssueRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationIssueRequestWithDefaults() *AuthorizationIssueRequest {
	this := AuthorizationIssueRequest{}
	return &this
}

// GetTicket returns the Ticket field value
func (o *AuthorizationIssueRequest) GetTicket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value
// and a boolean to check if the value has been set.
func (o *AuthorizationIssueRequest) GetTicketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ticket, true
}

// SetTicket sets field value
func (o *AuthorizationIssueRequest) SetTicket(v string) {
	o.Ticket = v
}

// GetSubject returns the Subject field value
func (o *AuthorizationIssueRequest) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *AuthorizationIssueRequest) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *AuthorizationIssueRequest) SetSubject(v string) {
	o.Subject = v
}

// GetAuthTime returns the AuthTime field value if set, zero value otherwise.
func (o *AuthorizationIssueRequest) GetAuthTime() string {
	if o == nil || o.AuthTime == nil {
		var ret string
		return ret
	}
	return *o.AuthTime
}

// GetAuthTimeOk returns a tuple with the AuthTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationIssueRequest) GetAuthTimeOk() (*string, bool) {
	if o == nil || o.AuthTime == nil {
		return nil, false
	}
	return o.AuthTime, true
}

// HasAuthTime returns a boolean if a field has been set.
func (o *AuthorizationIssueRequest) HasAuthTime() bool {
	if o != nil && o.AuthTime != nil {
		return true
	}

	return false
}

// SetAuthTime gets a reference to the given string and assigns it to the AuthTime field.
func (o *AuthorizationIssueRequest) SetAuthTime(v string) {
	o.AuthTime = &v
}

// GetAcr returns the Acr field value if set, zero value otherwise.
func (o *AuthorizationIssueRequest) GetAcr() string {
	if o == nil || o.Acr == nil {
		var ret string
		return ret
	}
	return *o.Acr
}

// GetAcrOk returns a tuple with the Acr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationIssueRequest) GetAcrOk() (*string, bool) {
	if o == nil || o.Acr == nil {
		return nil, false
	}
	return o.Acr, true
}

// HasAcr returns a boolean if a field has been set.
func (o *AuthorizationIssueRequest) HasAcr() bool {
	if o != nil && o.Acr != nil {
		return true
	}

	return false
}

// SetAcr gets a reference to the given string and assigns it to the Acr field.
func (o *AuthorizationIssueRequest) SetAcr(v string) {
	o.Acr = &v
}

// GetClaims returns the Claims field value if set, zero value otherwise.
func (o *AuthorizationIssueRequest) GetClaims() string {
	if o == nil || o.Claims == nil {
		var ret string
		return ret
	}
	return *o.Claims
}

// GetClaimsOk returns a tuple with the Claims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationIssueRequest) GetClaimsOk() (*string, bool) {
	if o == nil || o.Claims == nil {
		return nil, false
	}
	return o.Claims, true
}

// HasClaims returns a boolean if a field has been set.
func (o *AuthorizationIssueRequest) HasClaims() bool {
	if o != nil && o.Claims != nil {
		return true
	}

	return false
}

// SetClaims gets a reference to the given string and assigns it to the Claims field.
func (o *AuthorizationIssueRequest) SetClaims(v string) {
	o.Claims = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *AuthorizationIssueRequest) GetProperties() []Property {
	if o == nil || o.Properties == nil {
		var ret []Property
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationIssueRequest) GetPropertiesOk() ([]Property, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *AuthorizationIssueRequest) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []Property and assigns it to the Properties field.
func (o *AuthorizationIssueRequest) SetProperties(v []Property) {
	o.Properties = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AuthorizationIssueRequest) GetScopes() []string {
	if o == nil || o.Scopes == nil {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationIssueRequest) GetScopesOk() ([]string, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AuthorizationIssueRequest) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *AuthorizationIssueRequest) SetScopes(v []string) {
	o.Scopes = v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *AuthorizationIssueRequest) GetSub() string {
	if o == nil || o.Sub == nil {
		var ret string
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationIssueRequest) GetSubOk() (*string, bool) {
	if o == nil || o.Sub == nil {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *AuthorizationIssueRequest) HasSub() bool {
	if o != nil && o.Sub != nil {
		return true
	}

	return false
}

// SetSub gets a reference to the given string and assigns it to the Sub field.
func (o *AuthorizationIssueRequest) SetSub(v string) {
	o.Sub = &v
}

// GetIdHeaderParams returns the IdHeaderParams field value if set, zero value otherwise.
func (o *AuthorizationIssueRequest) GetIdHeaderParams() string {
	if o == nil || o.IdHeaderParams == nil {
		var ret string
		return ret
	}
	return *o.IdHeaderParams
}

// GetIdHeaderParamsOk returns a tuple with the IdHeaderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationIssueRequest) GetIdHeaderParamsOk() (*string, bool) {
	if o == nil || o.IdHeaderParams == nil {
		return nil, false
	}
	return o.IdHeaderParams, true
}

// HasIdHeaderParams returns a boolean if a field has been set.
func (o *AuthorizationIssueRequest) HasIdHeaderParams() bool {
	if o != nil && o.IdHeaderParams != nil {
		return true
	}

	return false
}

// SetIdHeaderParams gets a reference to the given string and assigns it to the IdHeaderParams field.
func (o *AuthorizationIssueRequest) SetIdHeaderParams(v string) {
	o.IdHeaderParams = &v
}

func (o AuthorizationIssueRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ticket"] = o.Ticket
	}
	if true {
		toSerialize["subject"] = o.Subject
	}
	if o.AuthTime != nil {
		toSerialize["authTime"] = o.AuthTime
	}
	if o.Acr != nil {
		toSerialize["acr"] = o.Acr
	}
	if o.Claims != nil {
		toSerialize["claims"] = o.Claims
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if o.Sub != nil {
		toSerialize["sub"] = o.Sub
	}
	if o.IdHeaderParams != nil {
		toSerialize["idHeaderParams"] = o.IdHeaderParams
	}
	return json.Marshal(toSerialize)
}

type NullableAuthorizationIssueRequest struct {
	value *AuthorizationIssueRequest
	isSet bool
}

func (v NullableAuthorizationIssueRequest) Get() *AuthorizationIssueRequest {
	return v.value
}

func (v *NullableAuthorizationIssueRequest) Set(val *AuthorizationIssueRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationIssueRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationIssueRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationIssueRequest(val *AuthorizationIssueRequest) *NullableAuthorizationIssueRequest {
	return &NullableAuthorizationIssueRequest{value: val, isSet: true}
}

func (v NullableAuthorizationIssueRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationIssueRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


