/*
Authlete API

Authlete API Document. 

API version: 2.2.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
)

// NamedUri struct for NamedUri
type NamedUri struct {
	Name *string `json:"name,omitempty"`
	Uri *string `json:"uri,omitempty"`
}

// NewNamedUri instantiates a new NamedUri object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamedUri() *NamedUri {
	this := NamedUri{}
	return &this
}

// NewNamedUriWithDefaults instantiates a new NamedUri object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamedUriWithDefaults() *NamedUri {
	this := NamedUri{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NamedUri) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedUri) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NamedUri) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NamedUri) SetName(v string) {
	o.Name = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *NamedUri) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedUri) GetUriOk() (*string, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *NamedUri) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *NamedUri) SetUri(v string) {
	o.Uri = &v
}

func (o NamedUri) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	return json.Marshal(toSerialize)
}

type NullableNamedUri struct {
	value *NamedUri
	isSet bool
}

func (v NullableNamedUri) Get() *NamedUri {
	return v.value
}

func (v *NullableNamedUri) Set(val *NamedUri) {
	v.value = val
	v.isSet = true
}

func (v NullableNamedUri) IsSet() bool {
	return v.isSet
}

func (v *NullableNamedUri) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamedUri(val *NamedUri) *NullableNamedUri {
	return &NullableNamedUri{value: val, isSet: true}
}

func (v NullableNamedUri) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamedUri) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


